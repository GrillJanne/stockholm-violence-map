#!/usr/bin/env python3
"""
Cron Setup Script f√∂r Stockholm V√•ldskarta Automatisering
S√§tter upp automatisk schemal√§ggning av datauppdateringar
"""

import os
import json
import subprocess
import sys
from pathlib import Path

def setup_cron():
    """S√§tter upp cron job f√∂r automatisk uppdatering"""
    try:
        # Ladda konfiguration
        with open('config.json', 'r') as f:
            config = json.load(f)
        
        schedule = config.get('automation', {}).get('schedule', '0 */6 * * *')
        
        # F√• absolut s√∂kv√§g till script
        script_dir = Path(__file__).parent.absolute()
        script_path = script_dir / 'auto_update.py'
        venv_python = script_dir / 'venv' / 'bin' / 'python'
        log_file = script_dir / 'logs' / 'automation.log'
        
        # Skapa logs-mapp om den inte finns
        (script_dir / 'logs').mkdir(exist_ok=True)
        
        # Cron kommando
        cron_command = f"cd {script_dir} && {venv_python} {script_path} >> {log_file} 2>&1"
        
        # L√§gg till cron job
        cron_entry = f"{schedule} {cron_command}"
        
        print("üïê S√§tter upp automatisk schemal√§ggning...")
        print(f"üìÖ Schema: {schedule} (var 6:e timme)")
        print(f"üìÇ Script: {script_path}")
        print(f"üìù Loggar: {log_file}")
        
        # Kontrollera om cron job redan finns
        result = subprocess.run(['crontab', '-l'], capture_output=True, text=True)
        existing_crontab = result.stdout if result.returncode == 0 else ""
        
        if 'auto_update.py' in existing_crontab:
            print("‚ö†Ô∏è  Cron job finns redan. Vill du uppdatera det? (y/n): ", end="")
            if input().lower() != 'y':
                print("‚ùå Avbryter setup av cron job")
                return False
            
            # Ta bort befintligt job
            lines = existing_crontab.strip().split('\n')
            filtered_lines = [line for line in lines if 'auto_update.py' not in line]
            new_crontab = '\n'.join(filtered_lines)
        else:
            new_crontab = existing_crontab.strip()
        
        # L√§gg till nytt job
        if new_crontab:
            new_crontab += '\n'
        new_crontab += cron_entry + '\n'
        
        # Installera ny crontab
        process = subprocess.Popen(['crontab', '-'], stdin=subprocess.PIPE, text=True)
        process.communicate(input=new_crontab)
        
        if process.returncode == 0:
            print("‚úÖ Cron job installerat framg√•ngsrikt!")
            print(f"üîÑ Automatisk uppdatering k√∂rs enligt schema: {schedule}")
            return True
        else:
            print("‚ùå Fel vid installation av cron job")
            return False
            
    except Exception as e:
        print(f"‚ùå Fel vid setup av cron: {e}")
        return False

def show_cron_status():
    """Visar status f√∂r befintliga cron jobs"""
    try:
        result = subprocess.run(['crontab', '-l'], capture_output=True, text=True)
        
        if result.returncode == 0:
            crontab_content = result.stdout
            
            if 'auto_update.py' in crontab_content:
                print("‚úÖ Automatisering √§r aktiv!")
                print("\nüìã Befintliga cron jobs:")
                for line in crontab_content.strip().split('\n'):
                    if 'auto_update.py' in line:
                        print(f"   {line}")
            else:
                print("‚ùå Ingen automatisering √§r konfigurerad")
        else:
            print("‚ùå Kunde inte l√§sa crontab")
            
    except Exception as e:
        print(f"‚ùå Fel vid kontroll av cron status: {e}")

def remove_cron():
    """Tar bort automatisering"""
    try:
        result = subprocess.run(['crontab', '-l'], capture_output=True, text=True)
        
        if result.returncode == 0:
            existing_crontab = result.stdout
            
            if 'auto_update.py' not in existing_crontab:
                print("‚ùå Ingen automatisering hittades att ta bort")
                return False
            
            # Ta bort automation jobs
            lines = existing_crontab.strip().split('\n')
            filtered_lines = [line for line in lines if 'auto_update.py' not in line]
            new_crontab = '\n'.join(filtered_lines) + '\n' if filtered_lines else ''
            
            # Installera uppdaterad crontab
            process = subprocess.Popen(['crontab', '-'], stdin=subprocess.PIPE, text=True)
            process.communicate(input=new_crontab)
            
            if process.returncode == 0:
                print("‚úÖ Automatisering borttagen!")
                return True
            else:
                print("‚ùå Fel vid borttagning av automatisering")
                return False
        else:
            print("‚ùå Kunde inte l√§sa crontab")
            return False
            
    except Exception as e:
        print(f"‚ùå Fel vid borttagning av cron: {e}")
        return False

def main():
    """Huvudfunktion"""
    print("üïê Stockholm V√•ldskarta - Cron Setup")
    print("====================================")
    
    if len(sys.argv) > 1:
        command = sys.argv[1]
        
        if command == 'install':
            setup_cron()
        elif command == 'status':
            show_cron_status()
        elif command == 'remove':
            remove_cron()
        else:
            print(f"‚ùå Ok√§nt kommando: {command}")
            print("Tillg√§ngliga kommandon: install, status, remove")
    else:
        print("V√§lj en √•tg√§rd:")
        print("1. Installera automatisering")
        print("2. Visa status")
        print("3. Ta bort automatisering")
        print("4. Avsluta")
        
        choice = input("\nV√§lj (1-4): ").strip()
        
        if choice == '1':
            setup_cron()
        elif choice == '2':
            show_cron_status()
        elif choice == '3':
            remove_cron()
        elif choice == '4':
            print("üëã Avslutar")
        else:
            print("‚ùå Ogiltigt val")

if __name__ == "__main__":
    main()

